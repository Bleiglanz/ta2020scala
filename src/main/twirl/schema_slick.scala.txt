@(t:model.DBTable)@name=@{t.name}@cclass=@{t.caseclassname}// Copyright (C) 2011-2012 the original author or authors.
// See the LICENCE.txt file distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package model.entities

import slick.jdbc.PostgresProfile.api._
import slick.lifted.ProvenShape

object @{cclass}{
  val all = TableQuery[@{cclass}Table]
  val schema = all.schema
  def dropAction: DBIOAction[Unit, NoStream, Effect.Schema] = DBIO.seq(schema.drop )
  def createAction: DBIOAction[Unit, NoStream, Effect.Schema] = DBIO.seq(schema.create)
  def insertAction(data:Seq[@cclass]):DBIOAction[Unit, NoStream, Effect.Write] = DBIO.seq(all ++= data)
}

case class @{cclass} (
  id:Option[Long],
  @t.fields.map(_.scaladecl).mkString("",",\n  ","\n"))

final class @{cclass}Table(tag: Tag) extends Table[@cclass](tag, "@name") {
  def id:Rep[Long] = column[Long]("id", O.PrimaryKey, O.AutoInc)@for(f<-t.fields){
  def @f.name:Rep[@f.sca] = column[@f.sca]("@f.name")}
  def * : ProvenShape[@cclass] = (id.?,@{t.fields.map(_.name).mkString(",")}) <> ((@{cclass}.apply _).tupled,@{cclass}.unapply)
}


